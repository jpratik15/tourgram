{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/FormElements/ImageUpload.js","users/pages/Auth.js"],"names":["Card","props","className","style","children","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","type","id","ref","display","accept","onChange","event","fileValid","pickedFile","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","Auth","useHistory","useForm","email","value","password","formState","inputHandler","setFormData","isLoading","setIsLoading","isError","setIsError","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","authFormSubmitHandler","a","preventDefault","fetch","process","method","headers","body","JSON","stringify","inputs","response","json","responseData","ok","Error","message","login","userId","token","console","log","formData","FormData","append","name","image","Fragment","error","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","undefined","prevMode"],"mappings":"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","file":"static/js/6.e739d6a7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./ImageUpload.css\";\r\nimport Button from \"./Button\";\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n        setPreviewUrl(fileReader.result);\r\n    }\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let fileValid;\r\n    let pickedFile;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      ></input>\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please Pick and Image</p>}\r\n\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          Upload\r\n        </Button>\r\n      </div>\r\n      <div>\r\n          {!isValid && <p>{props.errorText}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { isValidElement, useState, useContext } from \"react\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\"\r\n\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const history = useHistory();\r\n  const initialInput = {\r\n    email: {\r\n      value: \"\",\r\n      isValid: false,\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      isValid: false,\r\n    },\r\n  };\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(initialInput, false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState();\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image : undefined\r\n\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image : {\r\n            value : null,\r\n            isValid : false\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n  const authFormSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/login`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        setIsLoading(false);\r\n        auth.login(responseData.userId,responseData.token);\r\n      } catch (err) {\r\n        console.log(err);\r\n        setIsLoading(false);\r\n        setIsError(err.message || \"Something Went Wrong\");\r\n      }\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"name\",formState.inputs.name.value);\r\n        formData.append(\"email\",formState.inputs.email.value);\r\n        formData.append(\"password\",formState.inputs.password.value);\r\n        formData.append(\"image\",formState.inputs.image.value);\r\n\r\n        setIsLoading(true);\r\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/users/signup`, {\r\n          method: \"POST\",\r\n          body : formData\r\n        });\r\n\r\n        const responseData = await response.json();\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        setIsLoading(false);\r\n        auth.login(responseData.userId,responseData.token);\r\n      } catch (err) {\r\n        console.log(err);\r\n        setIsLoading(false);\r\n        setIsError(err.message || \"Something Went Wrong\");\r\n      }\r\n    }\r\n  };\r\n  const errorHandler = () => {\r\n    setIsError(null);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={isError} onClear={errorHandler} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required!</h2>\r\n        <hr />\r\n        <form onSubmit={authFormSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              id=\"name\"\r\n              element=\"input\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter your name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"Email\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email!!\"\r\n            onInput={inputHandler}\r\n          />\r\n          {!isLoginMode && <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please select an image\"/>}\r\n\r\n          <Input\r\n            id=\"password\"\r\n            element=\"input\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password of length atleast 6\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button type=\"submit\" onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}