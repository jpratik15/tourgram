{"version":3,"sources":["shared/components/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","placeId","useParams","useState","isLoading","setIsLoading","error","setError","identifiedPlace","setIdentifiedPlace","auth","useContext","AuthContext","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","fetch","process","response","json","responseData","ok","Error","message","place","sendReq","placeUpdateSubmitHandler","event","preventDefault","method","headers","Authorization","token","body","JSON","stringify","inputs","push","userId","console","log","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialisValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,mNCyJEC,UA/IK,WAClB,IAAMC,EAAUC,cAAYD,QADJ,EAEUE,oBAAS,GAFnB,mBAEjBC,EAFiB,KAENC,EAFM,OAGEF,qBAHF,mBAGjBG,EAHiB,KAGVC,EAHU,OAIsBJ,qBAJtB,mBAIjBK,EAJiB,KAIAC,EAJA,KAKlBC,EAAOC,qBAAWC,KAClBC,EAAUC,cANQ,EAQuBC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAnBsB,mBAQjBE,EARiB,KAQNC,EARM,KAQQC,EARR,KAwDxB,GAlCAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,6DACdnB,GAAa,GADC,kBAGWoB,MAAM,GAAD,OACvBC,4CADuB,mBACqBzB,IAJrC,cAGN0B,EAHM,gBAMeA,EAASC,OANxB,UAMNC,EANM,OAOPF,EAASG,GAPF,uBAQJ,IAAIC,MAAMF,EAAaG,SARnB,QAWZvB,EAAmBoB,EAAaI,OAChCX,EACE,CACEN,MAAO,CACLC,MAAOY,EAAaI,MAAMjB,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOY,EAAaI,MAAMd,YAC1BD,SAAS,KAGb,GAvBU,kDA0BZX,EAAS,KAAMyB,SA1BH,QA4Bd3B,GAAa,GA5BC,0DAAH,qDA8Bb6B,KACC,CAACZ,EAAarB,IAEbG,EACF,OACE,yBAAKP,UAAU,UACb,kBAAC,IAAD,OAKN,IAAKO,IAAcI,IAAoBF,EACrC,OACE,yBAAKT,UAAU,UACb,kBAAC,IAAD,KACE,oDAKR,IAAMsC,EAAwB,uCAAG,WAAOC,GAAP,iBAAAZ,EAAA,6DAC/BY,EAAMC,iBADyB,SAI7BhC,GAAa,GAJgB,SAKNoB,MAAM,GAAD,OACvBC,4CADuB,mBACqBzB,GAC/C,CACEqC,OAAQ,QACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAY9B,EAAK+B,OAElCC,KAAMC,KAAKC,UAAU,CACnB5B,MAAOI,EAAUyB,OAAO7B,MAAMC,MAC9BE,YAAaC,EAAUyB,OAAO1B,YAAYF,UAfnB,cAKvBU,EALuB,gBAmBFA,EAASC,OAnBP,UAmBvBC,EAnBuB,OAoBxBF,EAASG,GApBe,uBAqBrB,IAAIC,MAAMF,EAAaG,SArBF,QAuB7B3B,GAAa,GACbQ,EAAQiC,KAAK,IAAMpC,EAAKqC,OAAS,WAxBJ,kDA0B7BC,QAAQC,IAAR,MACA5C,GAAa,GACbE,EAAS,KAAMyB,SAAW,wBA5BG,0DAAH,sDAkC9B,OACE,kBAAC,IAAMkB,SAAP,KACE,kBAAC,IAAD,CAAY5C,MAAOA,EAAO6C,QALT,WACnB5C,EAAS,UAKLH,GAAaI,GACb,0BAAMX,UAAU,aAAauD,SAAUjB,GACrC,kBAAC,IAAD,CACEkB,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,0BACVC,QAASvC,EACTwC,aAAcrD,EAAgBQ,MAC9B8C,gBAAgB,IAGlB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,iCACVC,QAASvC,EACTwC,aAAcrD,EAAgBW,YAC9B2C,gBAAgB,IAElB,kBAAC,IAAD,CAAQP,KAAK,SAASS,UAAW5C,EAAUF,SAA3C","file":"static/js/8.eadbe789.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState,useContext } from \"react\";\r\n\r\nimport { useParams ,useHistory} from \"react-router-dom\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport {AuthContext} from \"../../shared/context/auth-context\"\r\n\r\nimport \"./UpdatePlace.css\";\r\n\r\nconst UpdatePlace = () => {\r\n  const placeId = useParams().placeId;\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  const [identifiedPlace, setIdentifiedPlace] = useState();\r\n  const auth = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const sendReq = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        const responseData = await response.json();\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n\r\n        setIdentifiedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    sendReq();\r\n  }, [setFormData, placeId]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isLoading && !identifiedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Cannot Find Place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  const placeUpdateSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n        {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: \"Bearer \" + auth.token\r\n          },\r\n          body: JSON.stringify({\r\n            title: formState.inputs.title.value,\r\n            description: formState.inputs.description.value,\r\n          }),\r\n        }\r\n      );\r\n      const responseData = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(responseData.message);\r\n      }\r\n      setIsLoading(false);\r\n      history.push(\"/\" + auth.userId + '/places');\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsLoading(false);\r\n      setError(error.message || \"Something Went Wrong\");\r\n    }\r\n  };\r\n  const errorHandler = () => {\r\n    setError(null);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={errorHandler} />\r\n      {!isLoading && identifiedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please Enter Valid Text\"\r\n            onInput={inputHandler}\r\n            initialValue={identifiedPlace.title}\r\n            initialisValid={true}\r\n          />\r\n\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please Enter Valid Description\"\r\n            onInput={inputHandler}\r\n            initialValue={identifiedPlace.description}\r\n            initialisValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"],"sourceRoot":""}