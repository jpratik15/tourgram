{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","type","id","ref","style","display","accept","onChange","event","fileValid","pickedFile","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","isLoading","setIsLoading","isError","setIsError","auth","useContext","AuthContext","useForm","title","value","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","userId","fetch","process","method","headers","Authorization","token","body","response","json","responseData","ok","Error","message","push","console","log","Fragment","error","onClear","onSubmit","asOverlay","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/7.802d680d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./ImageUpload.css\";\r\nimport Button from \"./Button\";\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n        setPreviewUrl(fileReader.result);\r\n    }\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let fileValid;\r\n    let pickedFile;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      ></input>\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please Pick and Image</p>}\r\n\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          Upload\r\n        </Button>\r\n      </div>\r\n      <div>\r\n          {!isValid && <p>{props.errorText}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useState,useContext } from \"react\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport {AuthContext} from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/util/validators\";\r\nimport \"./NewPlace.css\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\"\r\n\r\nconst NewPlace = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState();\r\n  \r\n  const auth = useContext(AuthContext);\r\n  const initialInput = {\r\n    title: {\r\n      value: \"\",\r\n      isValid: false,\r\n    },\r\n    description: {\r\n      value: \"\",\r\n      isValid: false,\r\n    },\r\n    address: {\r\n      value: \"\",\r\n      isValid: false,\r\n    },\r\n    image : {\r\n      value : null,\r\n      isValid: false,\r\n    }\r\n  };\r\n  const initialValidity = false;\r\n  \r\n  const [formState, inputHandler] = useForm(initialInput, initialValidity);\r\n  \r\n  const history = useHistory()\r\n  const placeSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('title',formState.inputs.title.value);\r\n      formData.append('description',formState.inputs.description.value);\r\n      formData.append('address',formState.inputs.address.value);\r\n      formData.append('creator',auth.userId);\r\n      formData.append('image',formState.inputs.image.value);\r\n\r\n      setIsLoading(true);\r\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/places`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: \"Bearer \" + auth.token\r\n        },\r\n        body : formData\r\n      });\r\n\r\n      const responseData = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(responseData.message);\r\n      }\r\n      setIsLoading(false);\r\n      history.push('/');\r\n    } catch (err) {\r\n      console.log(err);\r\n      setIsLoading(false);\r\n      setIsError(err.message || \"Something Went Wrong\");\r\n    }\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setIsError(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={isError} onClear={errorHandler}/>\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay/>}\r\n\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please Enter A Valid Title\"\r\n          onInput={inputHandler}\r\n        />\r\n\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please Enter Atleast 5 Characters\"\r\n          onInput={inputHandler}\r\n        />\r\n\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid address\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload id = \"image\" onInput = {inputHandler} errorText=\"Please provide an image\"/>\r\n\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          Add Place\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewPlace;\r\n"],"sourceRoot":""}